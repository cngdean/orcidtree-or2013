<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Orcid / PubMed Search Visualization - OR2013</title>

<!-- CSS Files -->
<link type="text/css" href="css/base.css" rel="stylesheet" />
<link type="text/css" href="css/Spacetree.css" rel="stylesheet" />

<!--[if IE]><script language="javascript" type="text/javascript" src="../../Extras/excanvas.js"></script><![endif]-->

<!-- JIT Library File -->
<script language="javascript" type="text/javascript" src="jit.js"></script>

<script>
var labelType, useGradients, nativeTextSupport, animate;

(function() {
  var ua = navigator.userAgent,
      iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      typeOfCanvas = typeof HTMLCanvasElement,
      nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      textSupport = nativeCanvasSupport 
        && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
  //I'm setting this based on the fact that ExCanvas provides text support for IE
  //and that as of today iPhone/iPad current text support is lame
  labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
  nativeTextSupport = labelType == 'Native';
  useGradients = nativeCanvasSupport;
  animate = !(iStuff || !nativeCanvasSupport);
})();

var Log = {
  elem: false,
  write: function(text){
    if (!this.elem) 
      this.elem = document.getElementById('log');
    this.elem.innerHTML = text;
    this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
  }
};


function init(){
    //alert(getParamValue('searchName'));
    //jquery use getJSON/get?

    //init data
    // which search are we running / what params? -- FIRST, totally fake out data JIC/forTesting! :)
    <% if params['namesearch'] 
        url = 'http://localhost:3000/namesearch.json'
    else
        url = 'http://localhost:3000/titlesearch.json'
    end %>

    var json = <%= Net::HTTP.get(URI.parse(url)).html_safe %>;
    
    //preprocess subtrees orientation
    var arr = json.children, len = arr.length;
    for(var i=0; i < len; i++) {
        //split half left orientation
      if(i < len / 2) {
            arr[i].data.$orn = 'left';
            $jit.json.each(arr[i], function(n) {
                n.data.$orn = 'left';
            });
        } else {
        //half right
            arr[i].data.$orn = 'right';
            $jit.json.each(arr[i], function(n) {
                n.data.$orn = 'right';
            });
        }
    }
    //end
    //grab radio button
    var normal = $jit.id('s-normal');
    //init Spacetree
    //Create a new ST instance
    var st = new $jit.ST({
        //id of viz container element
        injectInto: 'infovis',
        //multitree
          multitree: true,
        //set duration for the animation
        duration: 800,
        //set animation transition type
        transition: $jit.Trans.Quart.easeInOut,
        //set distance between node and its children
        levelDistance: 40,
        //sibling and subtrees offsets
        siblingOffset: 3,
        subtreeOffset: 3,
        //set node and edge styles
        //set overridable=true for styling individual
        //nodes or edges
        Node: {
            height: 105,
            width: 165,
            type: 'rectangle',
            color: '#aaa',
            overridable: true,
            //set canvas specific styles
            //like shadows
            CanvasStyles: {
              shadowColor: '#ccc',
              shadowBlur: 10
            }
        },
        Edge: {
            type: 'bezier',
            lineWidth: 2,
            overridable: true
        },
        
        onBeforeCompute: function(node){
            Log.write("loading " + node.name);
        },
        
        onAfterCompute: function(){
            Log.write("done");
        },
        
        //This method is called on DOM label creation.
        //Use this method to add event handlers and styles to
        //your node.
        onCreateLabel: function(label, node){
            label.id = node.id;            
            label.innerHTML = node.name;
            label.onclick = function(){
                if (node.data.type == 'name') {
                    location.href = "/namesearch/" + node.name; 
                } else if (node.data.type == 'publication') {
                    location.href = "/titlesearch/" + node.name; 
                }
                //st.setRoot(node.id, 'animate');
            };
            //set label styles
            var style = label.style;
            console.log(node);
            style.height = 105 + 'px';
            style.width = 160 + 'px';
            style.cursor = 'pointer';
            style.color = '#333';
            style.fontSize = '0.8em';
            style.textAlign= 'center';
            style.paddingTop = '10px';
        },
        
        //This method is called right before plotting
        //a node. It's useful for changing an individual node
        //style properties before plotting it.
        //The data properties prefixed with a dollar
        //sign will override the global node style properties.
        onBeforePlotNode: function(node){
            //add some color to the nodes in the path between the
            //root node and the selected node.
            if (node.selected) {
                node.data.$color = "#ff7";
                // could change node height here to be min or something? node.data.$height = 250;
            }
            else {
                delete node.data.$color;
                //if the node belongs to the last plotted level
                if(!node.anySubnode("exist")) {
                    //count children number
                    var count = 0;
                    node.eachSubnode(function(n) { count++; });
                    //assign a node color based on
                    //how many children it has
                    //node.data.$color = ['#aaa', '#baa', '#caa', '#daa', '#eaa', '#faa'][count];
                }
            }

            if (node.data.type == 'name') {
                node.data.$color = '#faa';
            } else if (node.data.type == 'publication') {
                node.data.$color = '#baa';
            }
        },
        
        //This method is called right before plotting
        //an edge. It's useful for changing an individual edge
        //style properties before plotting it.
        //Edge data proprties prefixed with a dollar sign will
        //override the Edge global style properties.
        onBeforePlotLine: function(adj){
            if (adj.nodeFrom.selected && adj.nodeTo.selected) {
                adj.data.$color = "#eed";
                adj.data.$lineWidth = 3;
            }
            else {
                delete adj.data.$color;
                delete adj.data.$lineWidth;
            }
        }
    });
    //load json data
    st.loadJSON(json);
    //compute node positions and layout
    st.compute('end');
    st.select(st.root);
    //end
}

    function getParamValue(parameter)   
    {   
        var urlParamString = location.search.substring(1, location.search.length);  
      
        var paramValue = false;  
        var params = urlParamString.split("&");  
          
        for (i=0; i<params.length;i++)   
        {  
            paramName = params[i].substring(0,params[i].indexOf('='));  
            if (paramName == parameter)   
            {  
                paramValue = params[i].substring(params[i].indexOf('=')+1)  
            }  
              
        }  
          
        if (paramValue)
        {  
            return paramValue.replace(/%20/g, ' ');  
        }  
        else   
        {  
            return null;  
        }  
    }  
      
</script>


</head>


<body onload="init();">
<div id="container">
    <div id="left-container">
        <div class="text">

        Orcid data here?
                
        </div>

    <div id="id-list"></div>
    </div>

    <div id="center-container">
        <div id="infovis"></div>    
        <div style="display:none" id="log"></div>
    </div>
</div>
<% if params['namesearch'] %>
  <h4>name search:<%=params['namesearch']%></h4>
<% else %>
  <h4>title search:<%=params['titlesearch']%></h4>
<% end %>

</body>
</html>
